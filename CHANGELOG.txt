05/12/2024: 
> modified the behaviour of setting V flag in the ADC instruction
> TODO change SBC to match

> fixed order of bytes in decode for absolute addresses

> deleted additional cycle increments on first instruction

> fixed ind,y addressing mode returning unincremented address ptr instead of ea

> implemented first suite of tests for ADC instruction
> TODO implement final case for ind,y addressing
> TODO implement tests for BCD mode. INVESTIGATE how it behaves in an online emulator?

> changed test creation to automatically call local 6502 assembler (acme) which generates program code in a binary file to load into the model

> changed test creation to store data at arbitrary addresses in the model memory by iterating over a dictionary of {address:list[bytes]}

> corrected logic for setting carry flag in BCD/binary mode for ADC and SBC
> TODO ensure correct logic for flags in BCD mode. refer to tutorial on 6502 org

> implemented SBC wraparound for BCD mode

06/12/24:
> changed the way instructions modify flags to make them coherent with changes to arithmetic instruction

> finished? the implementation of BCD mode for arithmetic instructions

> added option to test creation to view memory locations after done (for viewing in-memory test results)

> got Brian Clark's full BCD test program assembled and into the model
> TODO begin implementing instructions so it can be run in full

> Implemented JSR/RTS instructions so we can use subroutines

> implemented helper functions for pushing and popping the stack

> set SP register to initialize to 0xFF in main

> implemented flag instructions for setting/clearing the C/D flags (support BCD mode testing)

> implemented stack instructions for pushing/pulling into and out of A register and P (a.k.a. SR) register

> implemented CPY instruction with cleanup to SBC